/*^ Studio 42 License
 * Copyright Studio 42 GmbH 2021. All rights reserved.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For details to the License read https://www.s42m.de/license
 */

type de.s42.mq.materials.DefaultCubeTexture extends de.s42.mq.materials.CubeTexture alias DefaultCubeTexture
{
	de.s42.mq.shaders.EquirectangularToCubemapShader equirectangularToCubemapShader;
}

type de.s42.mq.shaders.FxaaShader @java(de.s42.mq.shaders.CombineFXShader) extends de.s42.mq.shaders.CombineFXShader alias FxaaShader;

type de.s42.mq.shaders.AddShader @java(de.s42.mq.shaders.BasicFXShader) extends de.s42.mq.shaders.BasicFXShader alias AddShader
{
	boolean renderTransparent : true;
}

type de.s42.mq.shaders.MultiplyShader @java(de.s42.mq.shaders.CombineFXShader) extends de.s42.mq.shaders.CombineFXShader alias MultiplyShader;

type de.s42.mq.shaders.AddMultiplyShader @java(de.s42.mq.shaders.CombineFXShader) extends de.s42.mq.shaders.CombineFXShader alias AddMultiplyShader
{
	boolean renderTransparent : true;
}

type de.s42.mq.shaders.CopyShader @java(de.s42.mq.shaders.BasicFXShader) extends de.s42.mq.shaders.BasicFXShader alias CopyShader;

type de.s42.mq.shaders.IrradianceShader @java(de.s42.mq.shaders.BasicFXShader) extends de.s42.mq.shaders.BasicFXShader alias IrradianceShader;

type de.s42.mq.shaders.DownscaleShader @java(de.s42.mq.shaders.BasicFXShader) extends de.s42.mq.shaders.BasicFXShader alias DownscaleShader;

type de.s42.mq.shaders.postfx.PostFXShader @java extends de.s42.mq.shaders.Shader alias PostFXShader
{
	IntegerData inBufferId @required;
	boolean depthTest : false;
	boolean depthWrite : false;
	boolean renderTransparent : false;
	FloatData exposure /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData vignetteStart  /*@editable*/ /*@min(0.0)*/ /*@max(2.0)*/ /*@step(0.05)*/;
	FloatData vignetteEnd  /*@editable*/ /*@min(0.0)*/ /*@max(2.0)*/ /*@step(0.05)*/;
	ColorData vignetteColor /*@editable*/;
	FloatData chromaticAbberationStrength /*@editable*/ /*@min(0.0)*/ /*@max(1000.0)*/ /*@step(0.1)*/;
	BlitMode blitMode : DEFAULT;
	FloatData lookupIntensity /*@editable*/ /*@min(0.0)*/ /*@max(1000.0)*/ /*@step(0.1)*/;
	FloatData barrelPower /*@editable*/ /*@min(0.0)*/ /*@max(1000.0)*/ /*@step(0.1)*/;
	Texture lookup;
}

type de.s42.mq.shaders.ParticlesShader @java extends de.s42.mq.shaders.Shader alias ParticlesShader
{
	Texture baseTexture;
	Texture noiseTexture;
	boolean cullFace : false;
	FloatData time @required;

	/**
	 * x * y tiles in the atlas
	 */
	Vector2Data spriteMapSize @required;
	FloatData timeScale @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData noiseScale @required /*@editable*/ /*@min(0.0)*/ /*@max(10.0)*/ /*@step(0.1)*/;
	FloatData scaleScale @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData baseScale @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData baseSpread @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData noiseSpeed @required /*@editable*/ /*@min(0.0)*/ /*@max(10.0)*/ /*@step(0.1)*/;
	FloatData rotationSpeed @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	vec3 velocity @required;
	FloatData maxAge @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	FloatData ageJitter @required /*@editable*/ /*@min(0.0)*/ /*@max(100.0)*/ /*@step(0.1)*/;
	ColorData tint @required /*@editable*/;
	FloatData alphaThreshold @required /*@editable*/ /*@min(0.0)*/ /*@max(1.0)*/ /*@step(0.01)*/;
}

type de.s42.mq.fonts.FontShader @java extends Shader alias FontShader
{
	Texture baseTexture;
	ColorData tint @required /*@editable*/;
	FloatData tintMultiplier @required /*@editable*/ /*@min(0.0)*/ /*@max(10000.0)*/ /*@step(0.01)*/;
	ColorData tint2 @required /*@editable*/;
	FloatData tint2Multiplier @required /*@editable*/ /*@min(0.0)*/ /*@max(10000.0)*/ /*@step(0.01)*/;
	FloatData edgeSize /*@editable*/ /*@min(0.0)*/ /*@max(0.5)*/ /*@step(0.01)*/;
	FloatData edge2Size /*@editable*/ /*@min(0.0)*/ /*@max(0.5)*/ /*@step(0.01)*/;
}